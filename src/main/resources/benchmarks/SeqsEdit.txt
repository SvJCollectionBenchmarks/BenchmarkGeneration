<@java@>
#{groups.$group.init.$language.$profile.content # T = Double #};
for (int i = 0; i < ${benchmarks.$benchmark.variables.unprofiled.batch}; i++)
    #{groups.$group.operations.append.$profile.content # elem = Math.sin(i/0.01) #};
${benchmarks.$benchmark.variables.profiled.$language.$profile.samples};
for (int i = 0; i < ${benchmarks.$benchmark.variables.unprofiled.batch}; i++) {
    int index = (i * ${benchmarks.$benchmark.variables.unprofiled.batch} / 3) % ${groups.$group.operations.size.$profile.content};
    switch (i % 4) {
        case 0: #{groups.$group.operations.set.$profile.content # index = index ## elem = 1.0 #}; break;
        case 1: #{groups.$group.operations.insert.$profile.content # index = index ## elem = 1.0 #}; break;
        case 2: #{groups.$group.operations.removeAt.$profile.content # index = index #}; break;
        case 3: #{groups.$group.operations.insertAll.$profile.content # index = index ## elems = samples #}; break;
    }
}
<@java@>
<@scala@>
#{groups.$group.init.$language.$profile.content # T = Double #}
for (i <- 0 until ${benchmarks.$benchmark.variables.unprofiled.batch})
    #{groups.$group.operations.append.$profile.content # elem = Math.sin(i/0.01) #}
${benchmarks.$benchmark.variables.profiled.$language.$profile.samples}
for (i <- 0 until ${benchmarks.$benchmark.variables.unprofiled.batch}) {
    val index = (i * ${benchmarks.$benchmark.variables.unprofiled.batch} / 3) % ${groups.$group.operations.size.$profile.content};
    (i % 4) match {
        case 0 => #{groups.$group.operations.set.$profile.content # index = index ## elem = 1.0 #}
        case 1 => #{groups.$group.operations.insert.$profile.content # index = index ## elem = 1.0 #}
        case 2 => #{groups.$group.operations.removeAt.$profile.content # index = index #}
        case 3 => #{groups.$group.operations.insertAll.$profile.content # index = index ## elems = samples #}
    }
}
<@scala@>