<@java@>
#{groups.$group.init.$language.$profile.content # T = Cell #};
for (Cell cell : startingPoint) addLivingCell(collection, cell.row(), cell.column());
List<Cell> additions = new ArrayList<>();
List<Cell> removals = new ArrayList<>();
while (!collection.isEmpty()) {
    ${benchmarks.$benchmark.variables.profiled.$language.$profile.iteratorImport}<Cell> iter = ${groups.$group.operations.iterator.$profile.content};
    while (iter.hasNext()) {
        Cell cell = iter.next();
        int neighbours = neighboursCount(collection, cell.row(), cell.column());
        if (!cell.isAlive() && neighbours == 3)
            additions.add(Cell.livingCell(cell.row(), cell.column()));
        else if (cell.isAlive() && (neighbours < 2 || neighbours > 3))
            removals.add(Cell.livingCell(cell.row(), cell.column()));
    }
    additions.forEach(c -> addLivingCell(collection, c.row(), c.column()));
    removals.forEach(c -> removeLivingCell(collection, c.row(), c.column()));
    additions.clear(); removals.clear();
}
<@java@>
<@scala@>
#{groups.$group.init.$language.$profile.content # T = Cell #}
for (cell <- startingPoint) addLivingCell(collection, cell.row, cell.column)
val additions = new util.ArrayList[Cell]
val removals = new util.ArrayList[Cell]
while (collection.nonEmpty) {
  val iter = collection.iterator
  while (iter.hasNext) {
    val cell = iter.next
    val neighbours: Int = neighboursCount(collection, cell.row, cell.column)
    if (!cell.isAlive && neighbours == 3) additions.add(Cell.livingCell(cell.row, cell.column))
    else if (cell.isAlive && (neighbours < 2 || neighbours > 3)) removals.add(Cell.livingCell(cell.row, cell.column))
  }
  additions.forEach((c: Cell) => addLivingCell(collection, c.row, c.column))
  removals.forEach((c: Cell) => removeLivingCell(collection, c.row, c.column))
  additions.clear()
  removals.clear()
}
<@scala@>

