{
	"generated": {
		"JHashSet": "java",
		"JLinkedSet": "java",
		"SHashSet": "scala",
		"SLinkedSet": "scala"
	},
	"imports": {
		"java": [
			"import java.util.*;",
			"import scala.collection.mutable.*;",
			"import scala.collection.immutable.*;"
		],
		"scala": [
			"import java.util",
			"import scala.collection.mutable",
			"import scala.collection.immutable"
		]
	},
	"init": {
		"java": {
			"JHashSet": {
				"args": [],
				"content": "java.util.HashSet<$T> collection = new java.util.HashSet<>()"
			},
			"JLinkedSet": {
				"args": [],
				"content": "java.util.LinkedHashSet<$T> collection = new java.util.LinkedHashSet<>()"
			},
			"SHashSet": {
				"args": [],
				"content": "scala.collection.mutable.HashSet<$T> collection = new scala.collection.mutable.HashSet<>()"
			},
			"SLinkedSet": {
				"args": [],
				"content": "scala.collection.mutable.LinkedHashSet<$T> collection = new scala.collection.mutable.LinkedHashSet<>()"
			}
		},
		"scala": {
			"JHashSet": {
				"args": [],
				"content": "var collection = new util.HashSet[$T]()"
			},
			"JLinkedSet": {
				"args": [],
				"content": "var collection = new util.LinkedHashSet[$T]()"
			},
			"SHashSet": {
				"args": [],
				"content": "var collection = mutable.HashSet[$T]()"
			},
			"SLinkedSet": {
				"args": [],
				"content": "var collection = mutable.LinkedHashSet[$T]()"
			}
		}
	},
	"operations": {
		"size": {
			"java": {
				"isBenchmarkedAutomatically": false,
				"isConsumable": true,
				"args": [],
				"content": "collection.size()"
			},
			"scala": {
				"isBenchmarkedAutomatically": false,
				"isConsumable": true,
				"args": [],
				"content": "collection.size"
			}
		},
		"add": {
			"java": {
				"isBenchmarkedAutomatically": true,
				"isConsumable": true,
				"args": [ { "name": "elem", "type": "$T" } ],
				"content": "collection.add($elem)"
			},
			"scala": {
				"isBenchmarkedAutomatically": true,
				"isConsumable": true,
				"args": [ { "name": "elem", "type": "$T" } ],
				"content": "collection.add($elem)"
			}
		},
		"contains": {
			"java": {
				"isBenchmarkedAutomatically": true,
				"isConsumable": true,
				"args": [ { "name": "elem", "type": "$T" } ],
				"content": "collection.contains($elem)"
			},
			"scala": {
				"isBenchmarkedAutomatically": true,
				"isConsumable": true,
				"args": [ { "name": "elem", "type": "$T" } ],
				"content": "collection.contains($elem)"
			}
		},
		"clear": {
			"java": {
				"isBenchmarkedAutomatically": false,
				"isConsumable": false,
				"args": [],
				"content": "collection.clear()"
			},
			"scala": {
				"isBenchmarkedAutomatically": false,
				"isConsumable": false,
				"args": [],
				"content": "collection.clear()"
			}
		},
		"addAll": {
			"java": {
				"isBenchmarkedAutomatically": true,
				"isConsumable": true,
				"args": [ { "name": "elems", "type": "Collection<? extends $T>" } ],
				"content": "collection.addAll($elems)"
			},
			"scala": {
				"isBenchmarkedAutomatically": true,
				"isConsumable": true,
				"args": [ { "name": "elems", "type": "IterableOnce[$T]" } ],
				"content": "collection.addAll($elems)"
			}
		},
		"toArray": {
			"java": {
				"isBenchmarkedAutomatically": true,
				"isConsumable": false,
				"args": [ { "name": "tag", "type": "$T[]" } ],
				"content": "collection.toArray($tag)"
			},
			"scala": {
				"isBenchmarkedAutomatically": true,
				"isConsumable": false,
				"args": [ { "name": "tag", "type": "ClassTag[$T]" } ],
				"content": "collection.toArray($tag)"
			}
		},
		"iterator": {
			"java": {
				"isBenchmarkedAutomatically": false,
				"isConsumable": true,
				"args": [],
				"content": "collection.iterator()"
			},
			"scala": {
				"isBenchmarkedAutomatically": false,
				"isConsumable": true,
				"args": [],
				"content": "collection.iterator"
			}
		},
		"remove": {
			"java": {
				"isBenchmarkedAutomatically": true,
				"isConsumable": true,
				"args": [ { "name": "elem", "type": "$T" } ],
				"content": "collection.remove($elem)"
			},
			"scala": {
				"isBenchmarkedAutomatically": true,
				"isConsumable": true,
				"args": [ { "name": "elem", "type": "$T" } ],
				"content": "collection.remove($elem)"
			}
		},
		"removeAll": {
			"java": {
				"isBenchmarkedAutomatically": true,
				"isConsumable": true,
				"args": [ { "name": "elems", "type": "Collection<? extends $T>" } ],
				"content": "collection.removeAll($elems)"
			},
			"scala": {
				"isBenchmarkedAutomatically": true,
				"isConsumable": true,
				"args": [ { "name": "elems", "type": "IterableOnce[$T]" } ],
				"content": "collection.subtractAll($elems)"
			}
		},
		"union": {
			"java": {
				"isBenchmarkedAutomatically": true,
				"isConsumable": false,
				"args": [{ "name": "elems", "type": "Set<$T>" }],
				"content": "collection.addAll($elems)"
			},
			"scala": {
				"isBenchmarkedAutomatically": true,
				"isConsumable": false,
				"args": [ { "name": "elems", "type": "Set[$T]" } ],
				"content": "collection = collection.union($elems)"
			}
		},
		"intersect": {
			"java": {
				"isBenchmarkedAutomatically": false,
				"isConsumable": false,
				"args": [{ "name": "elems", "type": "Set<$T>" }],
				"content": "collection.retainAll($elems)"
			},
			"scala": {
				"isBenchmarkedAutomatically": false,
				"isConsumable": false,
				"args": [ { "name": "elems", "type": "Set[$T]" } ],
				"content": "collection = collection.intersect($elems)"
			}
		},
		"difference": {
			"java": {
				"isBenchmarkedAutomatically": true,
				"isConsumable": false,
				"args": [{ "name": "elems", "type": "Set<$T>" }],
				"content": "collection.removeAll($elems)"
			},
			"scala": {
				"isBenchmarkedAutomatically": true,
				"isConsumable": false,
				"args": [ { "name": "elems", "type": "Set[$T]" } ],
				"content": "collection = collection.diff($elems)"
			}
		},
		"isEmpty": {
			"java": {
				"isBenchmarkedAutomatically": false,
				"isConsumable": true,
				"args": [],
				"content": "collection.isEmpty()"
			},
			"scala": {
				"isBenchmarkedAutomatically": false,
				"isConsumable": true,
				"args": [],
				"content": "collection.isEmpty"
			}
		}
	},
	"variables": {
		"T": ["Integer", "String", "Double", "Float", "Character", "Long"]
	}
}